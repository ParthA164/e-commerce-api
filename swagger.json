{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "description":"**ðŸš€ Getting Started Guide:**\n\n1. **Register**: Use `/api/users/signup` to create a new account (Customer or Seller)\n2. **Login**: Use `/api/users/signin` with your credentials to get a JWT token\n3. **Authorize**: Click the ðŸ”’ **Authorize** button above and enter: `Bearer <your-jwt-token>`\n4. **Explore**: Now you can access all protected endpoints!\n\n---\n\n**Complete E-commerce API** with role-based access control, product management, order processing, cart functionality, and social features.\n\n**User Roles:**\n- **Customer**: Can browse products, manage cart, place orders, like items\n- **Seller**: Can manage own products, view related orders, access analytics\n- **Admin**: Full system access and user management",
    "title": "E-commerce API"
  },
  "host": "localhost:3000",
  "basePath": "/",
  "schemes": ["http"],
  "consumes": ["application/json"],
  "produces": ["application/json"],
  "securityDefinitions": {
    "JWT": {
      "in": "header",
      "name": "Authorization",
      "type": "apiKey",
      "description": "Enter JWT token in format: Bearer <token>"
    }
  },
  "paths": {
    "/api/users/signin": {
      "post": {
        "tags": ["Users"],
        "summary": "User Login",
        "description": "User login to get JWT token",
        "security": [],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "User login credentials",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserLogin"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Login successful",
            "schema": {
              "type": "object",
              "properties": {
                "success": { "type": "boolean" },
                "message": { "type": "string" },
                "token": { "type": "string" },
                "user": { "$ref": "#/definitions/UserResponse" }
              }
            }
          },
          "400": {
            "description": "Invalid credentials or missing fields"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/api/users/signup": {
      "post": {
        "tags": ["Users"],
        "summary": "User Registration",
        "description": "Register a new user",
        "security": [],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "User registration data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserSignup"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User registered successfully",
            "schema": {
              "type": "object",
              "properties": {
                "success": { "type": "boolean" },
                "message": { "type": "string" },
                "user": { "$ref": "#/definitions/UserResponse" }
              }
            }
          },
          "400": {
            "description": "User already exists or validation error"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/users/profile": {
      "get": {
        "tags": ["Users"],
        "summary": "Get User Profile",
        "description": "Get current user's profile",
        "security": [{ "JWT": [] }],
        "responses": {
          "200": {
            "description": "Profile retrieved successfully",
            "schema": {
              "type": "object",
              "properties": {
                "success": { "type": "boolean" },
                "user": { "$ref": "#/definitions/UserResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/api/users/all": {
      "get": {
        "tags": ["Users"],
        "summary": "Get All Users",
        "description": "Get list of all users (admin only)",
        "security": [{ "JWT": [] }],
        "responses": {
          "200": {
            "description": "Users retrieved successfully",
            "schema": {
              "type": "object",
              "properties": {
                "success": { "type": "boolean" },
                "users": {
                  "type": "array",
                  "items": { "$ref": "#/definitions/UserResponse" }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Admin access required"
          }
        }
      }
    },
    "/api/users/{id}": {
      "get": {
        "tags": ["Users"],
        "summary": "Get User by ID",
        "description": "Get a specific user by ID",
        "security": [{ "JWT": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "User ID"
          }
        ],
        "responses": {
          "200": {
            "description": "User retrieved successfully",
            "schema": {
              "type": "object",
              "properties": {
                "success": { "type": "boolean" },
                "user": { "$ref": "#/definitions/UserResponse" }
              }
            }
          },
          "404": {
            "description": "User not found"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "put": {
        "tags": ["Users"],
        "summary": "Update User",
        "description": "Update user profile",
        "security": [{ "JWT": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "User ID"
          },
          {
            "in": "body",
            "name": "body",
            "description": "User update data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User updated successfully",
            "schema": {
              "type": "object",
              "properties": {
                "success": { "type": "boolean" },
                "message": { "type": "string" },
                "user": { "$ref": "#/definitions/UserResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden - can only update own profile"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "delete": {
        "tags": ["Users"],
        "summary": "Delete User",
        "description": "Delete user account",
        "security": [{ "JWT": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "User ID"
          }
        ],
        "responses": {
          "200": {
            "description": "User deleted successfully"
          },
          "403": {
            "description": "Forbidden - can only delete own profile"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/api/products": {
      "get": {
        "tags": ["Products"],
        "summary": "Get All Products",
        "description": "Get all active products (accessible to all authenticated users)",
        "security": [{ "JWT": [] }],
        "responses": {
          "200": {
            "description": "Products retrieved successfully",
            "schema": {
              "type": "object",
              "properties": {
                "success": { "type": "boolean" },
                "count": { "type": "number" },
                "products": {
                  "type": "array",
                  "items": { "$ref": "#/definitions/Product" }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": ["Products"],
        "summary": "Add Product",
        "description": "Add a new product (Sellers and Admins only)",
        "security": [{ "JWT": [] }],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Product data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProductCreate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Product created successfully",
            "schema": {
              "type": "object",
              "properties": {
                "success": { "type": "boolean" },
                "message": { "type": "string" },
                "product": { "$ref": "#/definitions/Product" }
              }
            }
          },
          "400": {
            "description": "Invalid product data"
          },
          "403": {
            "description": "Only sellers and admins can add products"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/products/search": {
      "get": {
        "tags": ["Products"],
        "summary": "Search Products",
        "description": "Search products by name or description",
        "security": [{ "JWT": [] }],
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "Search query"
          }
        ],
        "responses": {
          "200": {
            "description": "Search results retrieved successfully",
            "schema": {
              "type": "object",
              "properties": {
                "success": { "type": "boolean" },
                "query": { "type": "string" },
                "count": { "type": "number" },
                "products": {
                  "type": "array",
                  "items": { "$ref": "#/definitions/Product" }
                }
              }
            }
          },
          "400": {
            "description": "Search query is required"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/products/filter": {
      "get": {
        "tags": ["Products"],
        "summary": "Filter Products",
        "description": "Filter products by price range and categories",
        "security": [{ "JWT": [] }],
        "parameters": [
          {
            "name": "minPrice",
            "in": "query",
            "required": false,
            "type": "number",
            "description": "Minimum price"
          },
          {
            "name": "maxPrice",
            "in": "query",
            "required": false,
            "type": "number",
            "description": "Maximum price"
          },
          {
            "name": "categories",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Comma-separated category names"
          }
        ],
        "responses": {
          "200": {
            "description": "Filtered products retrieved successfully",
            "schema": {
              "type": "object",
              "properties": {
                "success": { "type": "boolean" },
                "count": { "type": "number" },
                "products": {
                  "type": "array",
                  "items": { "$ref": "#/definitions/Product" }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/products/categories": {
      "get": {
        "tags": ["Categories"],
        "summary": "Get All Categories",
        "description": "Get all available categories",
        "security": [{ "JWT": [] }],
        "responses": {
          "200": {
            "description": "Categories retrieved successfully",
            "schema": {
              "type": "object",
              "properties": {
                "success": { "type": "boolean" },
                "count": { "type": "number" },
                "categories": {
                  "type": "array",
                  "items": { "$ref": "#/definitions/Category" }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": ["Categories"],
        "summary": "Create Category",
        "description": "Create a new category (Admin only)",
        "security": [{ "JWT": [] }],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Category data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CategoryCreate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Category created successfully",
            "schema": {
              "type": "object",
              "properties": {
                "success": { "type": "boolean" },
                "message": { "type": "string" },
                "category": { "$ref": "#/definitions/Category" }
              }
            }
          },
          "400": {
            "description": "Category name is required"
          },
          "403": {
            "description": "Only admins can create categories"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/products/my/products": {
      "get": {
        "tags": ["Products"],
        "summary": "Get My Products",
        "description": "Get products created by the authenticated seller",
        "security": [{ "JWT": [] }],
        "responses": {
          "200": {
            "description": "Seller's products retrieved successfully",
            "schema": {
              "type": "object",
              "properties": {
                "success": { "type": "boolean" },
                "count": { "type": "number" },
                "products": {
                  "type": "array",
                  "items": { "$ref": "#/definitions/Product" }
                }
              }
            }
          },
          "403": {
            "description": "Only sellers can access this endpoint"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/products/rate": {
      "post": {
        "tags": ["Products"],
        "summary": "Rate Product",
        "description": "Add or update rating for a product",
        "security": [{ "JWT": [] }],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Rating data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProductRating"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Rating added successfully",
            "schema": {
              "type": "object",
              "properties": {
                "success": { "type": "boolean" },
                "message": { "type": "string" }
              }
            }
          },
          "400": {
            "description": "Product ID and rating are required"
          },
          "404": {
            "description": "Product not found"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/products/{id}": {
      "get": {
        "tags": ["Products"],
        "summary": "Get Product by ID",
        "description": "Get a single product by ID",
        "security": [{ "JWT": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Product ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Product retrieved successfully",
            "schema": {
              "type": "object",
              "properties": {
                "success": { "type": "boolean" },
                "product": { "$ref": "#/definitions/Product" }
              }
            }
          },
          "400": {
            "description": "Invalid product ID"
          },
          "404": {
            "description": "Product not found"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "put": {
        "tags": ["Products"],
        "summary": "Update Product",
        "description": "Update an existing product (Only product owner or Admin)",
        "security": [{ "JWT": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Product ID"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Product update data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProductUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Product updated successfully",
            "schema": {
              "type": "object",
              "properties": {
                "success": { "type": "boolean" },
                "message": { "type": "string" },
                "product": { "$ref": "#/definitions/Product" }
              }
            }
          },
          "400": {
            "description": "Invalid product ID or data"
          },
          "403": {
            "description": "You can only update your own products"
          },
          "404": {
            "description": "Product not found"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": ["Products"],
        "summary": "Delete Product",
        "description": "Delete a product (Only product owner or Admin)",
        "security": [{ "JWT": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Product ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Product deleted successfully",
            "schema": {
              "type": "object",
              "properties": {
                "success": { "type": "boolean" },
                "message": { "type": "string" }
              }
            }
          },
          "400": {
            "description": "Invalid product ID"
          },
          "403": {
            "description": "You can only delete your own products"
          },
          "404": {
            "description": "Product not found"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/cartItems": {
      "get": {
        "tags": ["Cart Items"],
        "summary": "Get Cart Items",
        "description": "Get current user's cart items with product details",
        "security": [{ "JWT": [] }],
        "responses": {
          "200": {
            "description": "Cart items retrieved successfully",
            "schema": {
              "type": "object",
              "properties": {
                "success": { "type": "boolean" },
                "count": { "type": "number" },
                "totalAmount": { "type": "number" },
                "cartItems": {
                  "type": "array",
                  "items": { "$ref": "#/definitions/CartItem" }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": ["Cart Items"],
        "summary": "Add to Cart",
        "description": "Add product to cart or update quantity if already exists",
        "security": [{ "JWT": [] }],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Cart item data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CartItemCreate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Item added to cart successfully",
            "schema": {
              "type": "object",
              "properties": {
                "success": { "type": "boolean" },
                "message": { "type": "string" },
                "cartItem": { "$ref": "#/definitions/CartItem" }
              }
            }
          },
          "400": {
            "description": "Invalid product ID or quantity"
          },
          "404": {
            "description": "Product not found"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": ["Cart Items"],
        "summary": "Clear Cart",
        "description": "Remove all items from user's cart",
        "security": [{ "JWT": [] }],
        "responses": {
          "200": {
            "description": "Cart cleared successfully",
            "schema": {
              "type": "object",
              "properties": {
                "success": { "type": "boolean" },
                "message": { "type": "string" }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/cartItems/{id}": {
      "put": {
        "tags": ["Cart Items"],
        "summary": "Update Cart Item",
        "description": "Update quantity of a cart item",
        "security": [{ "JWT": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Cart item ID"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Updated quantity",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["quantity"],
              "properties": {
                "quantity": {
                  "type": "number",
                  "minimum": 1,
                  "example": 3
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Cart item updated successfully",
            "schema": {
              "type": "object",
              "properties": {
                "success": { "type": "boolean" },
                "message": { "type": "string" },
                "cartItem": { "$ref": "#/definitions/CartItem" }
              }
            }
          },
          "400": {
            "description": "Invalid cart item ID or quantity"
          },
          "403": {
            "description": "You can only update your own cart items"
          },
          "404": {
            "description": "Cart item not found"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": ["Cart Items"],
        "summary": "Remove from Cart",
        "description": "Remove specific item from cart",
        "security": [{ "JWT": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Cart item ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Item removed from cart successfully",
            "schema": {
              "type": "object",
              "properties": {
                "success": { "type": "boolean" },
                "message": { "type": "string" }
              }
            }
          },
          "400": {
            "description": "Invalid cart item ID"
          },
          "403": {
            "description": "You can only remove your own cart items"
          },
          "404": {
            "description": "Cart item not found"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/likes": {
      "get": {
        "tags": ["Likes"],
        "summary": "Get Likes",
        "description": "Get likes for a specific entity (product or category)",
        "security": [{ "JWT": [] }],
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": ["Product", "Category"],
            "description": "Type of entity to get likes for"
          },
          {
            "name": "id",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "ID of the entity"
          }
        ],
        "responses": {
          "200": {
            "description": "Likes retrieved successfully",
            "schema": {
              "type": "object",
              "properties": {
                "success": { "type": "boolean" },
                "likesCount": { "type": "number" },
                "userHasLiked": { "type": "boolean" },
                "likes": {
                  "type": "array",
                  "items": { "$ref": "#/definitions/Like" }
                }
              }
            }
          },
          "400": {
            "description": "Invalid type or ID parameter"
          },
          "404": {
            "description": "Entity not found"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": ["Likes"],
        "summary": "Toggle Like",
        "description": "Like or unlike a product or category",
        "security": [{ "JWT": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "ID of the entity to like"
          },
          {
            "name": "type",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": ["Product", "Category"],
            "description": "Type of entity to like"
          }
        ],
        "responses": {
          "200": {
            "description": "Like toggled successfully",
            "schema": {
              "type": "object",
              "properties": {
                "success": { "type": "boolean" },
                "message": { "type": "string" },
                "isLiked": { "type": "boolean" },
                "likesCount": { "type": "number" }
              }
            }
          },
          "400": {
            "description": "Invalid type or ID parameter"
          },
          "404": {
            "description": "Entity not found"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/likes/my-likes": {
      "get": {
        "tags": ["Likes"],
        "summary": "Get My Likes",
        "description": "Get all entities liked by the current user",
        "security": [{ "JWT": [] }],
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": ["Product", "Category"],
            "description": "Filter by entity type"
          }
        ],
        "responses": {
          "200": {
            "description": "User's likes retrieved successfully",
            "schema": {
              "type": "object",
              "properties": {
                "success": { "type": "boolean" },
                "count": { "type": "number" },
                "likes": {
                  "type": "array",
                  "items": { "$ref": "#/definitions/Like" }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/orders": {
      "post": {
        "tags": ["Orders"],
        "summary": "Create Order",
        "description": "Place a new order (Customers only)",
        "security": [{ "JWT": [] }],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Order data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OrderCreate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Order placed successfully",
            "schema": {
              "type": "object",
              "properties": {
                "success": { "type": "boolean" },
                "message": { "type": "string" },
                "order": { "$ref": "#/definitions/Order" }
              }
            }
          },
          "400": {
            "description": "Invalid order data or insufficient stock"
          },
          "403": {
            "description": "Only customers can place orders"
          },
          "404": {
            "description": "Product not found"
          }
        }
      }
    },
    "/api/orders/my-orders": {
      "get": {
        "tags": ["Orders"],
        "summary": "Get My Orders",
        "description": "Get customer's own orders with pagination",
        "security": [{ "JWT": [] }],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "type": "number",
            "default": 1,
            "description": "Page number"
          },
          {
            "name": "limit",
            "in": "query",
            "type": "number",
            "default": 10,
            "description": "Items per page"
          },
          {
            "name": "status",
            "in": "query",
            "type": "string",
            "enum": ["Pending", "Confirmed", "Processing", "Shipped", "Delivered", "Cancelled"],
            "description": "Filter by order status"
          }
        ],
        "responses": {
          "200": {
            "description": "Orders retrieved successfully",
            "schema": {
              "type": "object",
              "properties": {
                "success": { "type": "boolean" },
                "orders": {
                  "type": "array",
                  "items": { "$ref": "#/definitions/Order" }
                },
                "totalOrders": { "type": "number" },
                "currentPage": { "type": "number" },
                "totalPages": { "type": "number" }
              }
            }
          },
          "403": {
            "description": "Only customers can access this endpoint"
          }
        }
      }
    },
    "/api/orders/seller-orders": {
      "get": {
        "tags": ["Orders"],
        "summary": "Get Seller Orders",
        "description": "Get orders containing seller's products",
        "security": [{ "JWT": [] }],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "type": "number",
            "default": 1
          },
          {
            "name": "limit",
            "in": "query",
            "type": "number",
            "default": 10
          },
          {
            "name": "status",
            "in": "query",
            "type": "string",
            "enum": ["Pending", "Confirmed", "Processing", "Shipped", "Delivered", "Cancelled"]
          }
        ],
        "responses": {
          "200": {
            "description": "Seller orders retrieved successfully",
            "schema": {
              "type": "object",
              "properties": {
                "success": { "type": "boolean" },
                "message": { "type": "string" },
                "orders": {
                  "type": "array",
                  "items": { "$ref": "#/definitions/Order" }
                },
                "totalOrders": { "type": "number" },
                "currentPage": { "type": "number" },
                "totalPages": { "type": "number" }
              }
            }
          },
          "403": {
            "description": "Only sellers can access this endpoint"
          }
        }
      }
    },
    "/api/orders/all": {
      "get": {
        "tags": ["Orders"],
        "summary": "Get All Orders",
        "description": "Get all orders (Admin only)",
        "security": [{ "JWT": [] }],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "type": "number",
            "default": 1
          },
          {
            "name": "limit",
            "in": "query",
            "type": "number",
            "default": 10
          },
          {
            "name": "status",
            "in": "query",
            "type": "string",
            "enum": ["Pending", "Confirmed", "Processing", "Shipped", "Delivered", "Cancelled"]
          }
        ],
        "responses": {
          "200": {
            "description": "All orders retrieved successfully",
            "schema": {
              "type": "object",
              "properties": {
                "success": { "type": "boolean" },
                "orders": {
                  "type": "array",
                  "items": { "$ref": "#/definitions/Order" }
                },
                "totalOrders": { "type": "number" },
                "currentPage": { "type": "number" },
                "totalPages": { "type": "number" }
              }
            }
          },
          "403": {
            "description": "Only admins can access this endpoint"
          }
        }
      }
    },
    "/api/orders/analytics": {
      "get": {
        "tags": ["Orders"],
        "summary": "Get Order Analytics",
        "description": "Get order analytics (Admin for all orders, Seller for own orders)",
        "security": [{ "JWT": [] }],
        "responses": {
          "200": {
            "description": "Analytics retrieved successfully",
            "schema": {
              "type": "object",
              "properties": {
                "success": { "type": "boolean" },
                "analytics": {
                  "type": "object",
                  "properties": {
                    "totalOrders": { "type": "number" },
                    "totalRevenue": { "type": "number" },
                    "avgOrderValue": { "type": "number" },
                    "statusBreakdown": {
                      "type": "array",
                      "items": { "type": "string" }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Seller or Admin privileges required"
          }
        }
      }
    },
    "/api/orders/{id}": {
      "get": {
        "tags": ["Orders"],
        "summary": "Get Order by ID",
        "description": "Get order details by ID with role-based access control",
        "security": [{ "JWT": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Order ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Order retrieved successfully",
            "schema": {
              "type": "object",
              "properties": {
                "success": { "type": "boolean" },
                "order": { "$ref": "#/definitions/Order" }
              }
            }
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Order not found"
          }
        }
      }
    },
    "/api/orders/{id}/status": {
      "put": {
        "tags": ["Orders"],
        "summary": "Update Order Status",
        "description": "Update order status with role-based permissions",
        "security": [{ "JWT": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Order ID"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["status"],
              "properties": {
                "status": {
                  "type": "string",
                  "enum": ["Pending", "Confirmed", "Processing", "Shipped", "Delivered", "Cancelled"]
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Order status updated successfully",
            "schema": {
              "type": "object",
              "properties": {
                "success": { "type": "boolean" },
                "message": { "type": "string" },
                "order": { "$ref": "#/definitions/Order" }
              }
            }
          },
          "403": {
            "description": "Access denied"
          }
        }
      }
    },
    "/api/orders/{id}/cancel": {
      "put": {
        "tags": ["Orders"],
        "summary": "Cancel Order",
        "description": "Cancel an order with reason",
        "security": [{ "JWT": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Order ID"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["cancelReason"],
              "properties": {
                "cancelReason": { 
                  "type": "string",
                  "example": "Customer changed mind"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Order cancelled successfully",
            "schema": {
              "type": "object",
              "properties": {
                "success": { "type": "boolean" },
                "message": { "type": "string" },
                "order": { "$ref": "#/definitions/Order" }
              }
            }
          },
          "403": {
            "description": "Access denied"
          }
        }
      }
    }
  },
  "definitions": {
    "UserLogin": {
      "type": "object",
      "required": ["email", "password"],
      "properties": {
        "email": { 
          "type": "string",
          "format": "email",
          "example": "user@example.com"
        },
        "password": { 
          "type": "string",
          "minLength": 6,
          "example": "password123"
        }
      }
    },
    "UserSignup": {
      "type": "object",
      "required": ["name", "email", "password"],
      "properties": {
        "name": { 
          "type": "string",
          "example": "John Doe"
        },
        "email": { 
          "type": "string",
          "format": "email",
          "example": "user@example.com"
        },
        "password": { 
          "type": "string",
          "minLength": 6,
          "example": "password123"
        },
        "type": { 
          "type": "string",
          "enum": ["Customer", "Seller"],
          "default": "Customer",
          "description": "Admin role can only be assigned directly in database"
        }
      }
    },
    "UserUpdate": {
      "type": "object",
      "properties": {
        "name": { "type": "string" },
        "email": { "type": "string", "format": "email" },
        "password": { "type": "string", "minLength": 6 },
        "type": { 
          "type": "string",
          "enum": ["Customer", "Seller"],
          "description": "Admin role can only be assigned directly in database"
        }
      }
    },
    "UserResponse": {
      "type": "object",
      "properties": {
        "_id": { "type": "string" },
        "name": { "type": "string" },
        "email": { "type": "string" },
        "type": { 
          "type": "string",
          "enum": ["Customer", "Seller", "Admin"]
        },
        "createdAt": { "type": "string", "format": "date-time" },
        "updatedAt": { "type": "string", "format": "date-time" }
      }
    },
    "Product": {
      "type": "object",
      "properties": {
        "_id": { "type": "string" },
        "name": { "type": "string" },
        "description": { "type": "string" },
        "price": { "type": "number" },
        "inStock": { "type": "number" },
        "categories": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "_id": { "type": "string" },
              "name": { "type": "string" },
              "description": { "type": "string" }
            }
          }
        },
        "seller": {
          "type": "object",
          "properties": {
            "_id": { "type": "string" },
            "name": { "type": "string" },
            "email": { "type": "string" },
            "type": { "type": "string" }
          }
        },
        "ratings": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "userID": {
                "type": "object",
                "properties": {
                  "_id": { "type": "string" },
                  "name": { "type": "string" }
                }
              },
              "rating": { "type": "number", "minimum": 1, "maximum": 5 }
            }
          }
        },
        "reviews": {
          "type": "array",
          "items": { "type": "string" }
        },
        "isActive": { "type": "boolean" },
        "createdAt": { "type": "string", "format": "date-time" },
        "updatedAt": { "type": "string", "format": "date-time" }
      }
    },
    "ProductCreate": {
      "type": "object",
      "required": ["name", "description", "price", "categories"],
      "properties": {
        "name": { 
          "type": "string",
          "example": "iPhone 14 Pro"
        },
        "description": { 
          "type": "string",
          "example": "Latest iPhone with advanced camera system"
        },
        "price": { 
          "type": "number",
          "example": 999.99
        },
        "inStock": { 
          "type": "number", 
          "default": 0,
          "example": 10
        },
        "categories": { 
          "type": "array",
          "items": { "type": "string" },
          "example": ["Electronics", "Mobile Phones"]
        }
      }
    },
    "ProductUpdate": {
      "type": "object",
      "properties": {
        "name": { "type": "string" },
        "description": { "type": "string" },
        "price": { "type": "number" },
        "inStock": { "type": "number" },
        "categories": { 
          "type": "array",
          "items": { "type": "string" }
        }
      }
    },
    "ProductRating": {
      "type": "object",
      "required": ["productID", "rating"],
      "properties": {
        "productID": { 
          "type": "string",
          "example": "60d5ecb74c5b1c2d8c8b4567"
        },
        "rating": { 
          "type": "number",
          "minimum": 1,
          "maximum": 5,
          "example": 4
        }
      }
    },
    "Category": {
      "type": "object",
      "properties": {
        "_id": { "type": "string" },
        "name": { "type": "string" },
        "description": { "type": "string" },
        "isActive": { "type": "boolean" },
        "createdBy": {
          "type": "object",
          "properties": {
            "_id": { "type": "string" },
            "name": { "type": "string" },
            "email": { "type": "string" }
          }
        },
        "createdAt": { "type": "string", "format": "date-time" },
        "updatedAt": { "type": "string", "format": "date-time" }
      }
    },
    "CategoryCreate": {
      "type": "object",
      "required": ["name"],
      "properties": {
        "name": { 
          "type": "string",
          "example": "Electronics"
        },
        "description": { 
          "type": "string",
          "example": "Electronic devices and gadgets"
        }
      }
    },
    "CartItem": {
      "type": "object",
      "properties": {
        "_id": { "type": "string" },
        "userID": { "type": "string" },
        "productID": {
          "type": "object",
          "properties": {
            "_id": { "type": "string" },
            "name": { "type": "string" },
            "description": { "type": "string" },
            "price": { "type": "number" },
            "inStock": { "type": "number" },
            "seller": {
              "type": "object",
              "properties": {
                "_id": { "type": "string" },
                "name": { "type": "string" },
                "email": { "type": "string" }
              }
            }
          }
        },
        "quantity": { "type": "number" },
        "totalPrice": { "type": "number" },
        "createdAt": { "type": "string", "format": "date-time" },
        "updatedAt": { "type": "string", "format": "date-time" }
      }
    },
    "CartItemCreate": {
      "type": "object",
      "required": ["productID", "quantity"],
      "properties": {
        "productID": { 
          "type": "string",
          "example": "60d5ecb74c5b1c2d8c8b4567"
        },
        "quantity": { 
          "type": "number", 
          "minimum": 1,
          "example": 2
        }
      }
    },
    "Like": {
      "type": "object",
      "properties": {
        "_id": { "type": "string" },
        "userID": {
          "type": "object",
          "properties": {
            "_id": { "type": "string" },
            "name": { "type": "string" },
            "email": { "type": "string" }
          }
        },
        "likeableType": {
          "type": "string",
          "enum": ["Product", "Category"]
        },
        "likeableID": { "type": "string" },
        "entityDetails": {
          "type": "object",
          "description": "Populated details of the liked entity (Product or Category)"
        },
        "createdAt": { "type": "string", "format": "date-time" }
      }
    },
    "OrderCreate": {
      "type": "object",
      "required": ["items", "shippingAddress"],
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "required": ["productID", "quantity"],
            "properties": {
              "productID": { 
                "type": "string",
                "example": "60d5ecb74c5b1c2d8c8b4567"
              },
              "quantity": { 
                "type": "number", 
                "minimum": 1,
                "example": 2
              }
            }
          }
        },
        "shippingAddress": {
          "type": "object",
          "required": ["street", "city", "state", "zipCode"],
          "properties": {
            "street": { 
              "type": "string",
              "example": "123 Main Street"
            },
            "city": { 
              "type": "string",
              "example": "Mumbai"
            },
            "state": { 
              "type": "string",
              "example": "Maharashtra"
            },
            "zipCode": { 
              "type": "string",
              "example": "400001"
            },
            "country": { 
              "type": "string", 
              "default": "India",
              "example": "India"
            }
          }
        },
        "paymentMethod": {
          "type": "string",
          "enum": ["Credit Card", "Debit Card", "PayPal", "Cash on Delivery", "UPI"],
          "default": "Cash on Delivery",
          "example": "Cash on Delivery"
        },
        "orderNotes": { 
          "type": "string",
          "example": "Please deliver after 6 PM"
        }
      }
    },
    "Order": {
      "type": "object",
      "properties": {
        "_id": { "type": "string" },
        "customer": {
          "type": "object",
          "properties": {
            "_id": { "type": "string" },
            "name": { "type": "string" },
            "email": { "type": "string" }
          }
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "product": {
                "type": "object",
                "properties": {
                  "_id": { "type": "string" },
                  "name": { "type": "string" },
                  "description": { "type": "string" },
                  "price": { "type": "number" }
                }
              },
              "seller": {
                "type": "object",
                "properties": {
                  "_id": { "type": "string" },
                  "name": { "type": "string" },
                  "email": { "type": "string" }
                }
              },
              "quantity": { "type": "number" },
              "price": { "type": "number" },
              "totalPrice": { "type": "number" }
            }
          }
        },
        "shippingAddress": {
          "type": "object",
          "properties": {
            "street": { "type": "string" },
            "city": { "type": "string" },
            "state": { "type": "string" },
            "zipCode": { "type": "string" },
            "country": { "type": "string" }
          }
        },
        "paymentMethod": { "type": "string" },
        "paymentStatus": { 
          "type": "string",
          "enum": ["Pending", "Paid", "Failed", "Refunded"]
        },
        "orderStatus": { 
          "type": "string",
          "enum": ["Pending", "Confirmed", "Processing", "Shipped", "Delivered", "Cancelled"]
        },
        "totalAmount": { "type": "number" },
        "discountAmount": { "type": "number" },
        "taxAmount": { "type": "number" },
        "shippingCost": { "type": "number" },
        "finalAmount": { "type": "number" },
        "orderNotes": { "type": "string" },
        "trackingNumber": { "type": "string" },
        "estimatedDelivery": { "type": "string", "format": "date-time" },
        "deliveredAt": { "type": "string", "format": "date-time" },
        "cancelledAt": { "type": "string", "format": "date-time" },
        "cancelReason": { "type": "string" },
        "createdAt": { "type": "string", "format": "date-time" },
        "updatedAt": { "type": "string", "format": "date-time" }
      }
    }
  }
}